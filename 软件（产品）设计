过度设计——往往发生得隐蔽和普遍得多
过度设计就是进行了过多的面向未来的设计

要A, 给了ABCD，增加用户选择，增加开发成本
过度假设用户行为：误区--用户可能会这么，所以我们应该。。。

盲目满足用户需求：经常会出现「希望马上把这个用户提出的问题解决掉」的心理，
「这个用户提出的问题很有价值，一定要记录下来」，「那个用户提出的抱怨确实忽略了，马上去改」，
这其实是对用户的声音缺乏筛选，很多用户并不是产品人员，对于一些设计的考虑是缺乏理性的，
只是片面的在抱怨一些主观意见，夹杂了很多个人的喜好。如果不加筛选的就听取意见，很容易就被上面的问题牵着鼻子走，造成不必要的过度设计。

避免过度设计：
TDD的一个核心思想是小步增量，不断重构。具体说来就是TDD有两个状态（常见的说法是两顶帽子）：
状态A：用test case描绘需求，并使用最简单的方式满足这个test case。注意要用最简单的方式满足这个需求，不能为任何test case之外的需求做任何设计。 test case通过之后进入状态B；
状态B：重构代码，让现有的代码在尽量保持简单性的同时足够优雅清晰。注意此时你只能对现有的实现代码进行重构，不能增加任何新的功能和test case。
整个TDD的过程就是在这两个状态间不断转换的过程。在状态A增加功能，在状态B优化设计。
TDD的这种思维方式走的稍微极端一点。它直接排斥任何对未来的设计，转而以优雅简洁的设计和test case来为未来需求的重构降低成本。 
可以说严格遵循TDD做出来的设计必然在过度设计和设计不足方面都不会有太大的问题。我严重推荐TDD。
不管你最终会不会接受TDD这种开发方式，它独特的思维方式都必然会给你的设计观念带来很大影响。
