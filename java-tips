Unsafe是用于在实质上扩展Java语言表达能力、便于在更高层（Java层）代码里实现原本要在更低层（C层）实现的核心库功能用的。
这些功能包括裸内存的申请/释放/访问，低层硬件的atomic/volatile支持，创建未初始化对象等。它原本的设计就只应该被标准库使用.
Unsafe是位于sun.misc下的一个类，在Java底层用的比较多，它让Java拥有了类似C语言一样直接操作内存空间的能力.

Docker：容器=镜像+读写层  分层镜像，采用联合挂载在最上层添加一个read/write层，其他层只读.
Springboot: 开启Gzip后，chrome端可以看到content-download时间明显下降。
dataV： 大屏展示

如何将一个Bean塞进Spring容器中：？？
  需要通过代理的方式给接口生成对应的实现类。接下来再通过把代理类放到 Spring 的 FactoryBean 的实现中，最后再把这个 FactoryBean 实现类注册到 Spring 容器。
  那么现在你的代理类就已经被注册到 Spring 容器了，接下来就可以通过注解的方式注入到属性中。
  注册FactoryBean（为啥不直接注册代理类呢？？，注册时候使用哪些类？？）
  关键类：Proxy,InvocationHandler,FactoryBean,GenericBeanDefinition,BeanDefinitionHolder ,BeanDefinitionReaderUtils.
  
使用Spring Event优化某些场景的通知问题：注意spring event本身是同步的（分发事件，然后接着就开始执行事件监听函数的逻辑，最后从事件分发函数结束，监听函数是同步执行，@Async）
  主要的类：ApplicationEvent,@Async , @EventListener(RefreshRoleResourceCacheEvent.class),@EnableAsync

SmartLifecycle：
  通常会用@PostConstruct和@PreDestroy在Bean初始化或销毁时执行一些操作，这些操作属于Bean声明周期级别的，
  存在一些遗漏的场景，比如我们想在容器本身的生命周期（比如容器启动、停止）的事件上做一些工作，很典型的就是Spring Boot中启动内嵌的Web容器。该怎么办？
  Lifecycle是一个接口，它的作用是让开发者可以在所有的bean都创建完成(getBean)之后执行自己的初始化工作，或者在退出时执行资源销毁工作。
  在SpringBoot或Spring应用中如果没有调用AbstractApplicationContext#start方法，只是实现了Lifecycle接口，
  是不会执行Lifecycle接口中的启动方法和isRunning方法的。但在应用退出时会执行Lifecycle#isRunning方法判断该Lifecycle是否已经启动，如果返回true则调用Lifecycle#stop()停止方法。
  而在一般的项目中，我们很少这样显式的去调用，所以就需要一个更“聪明”的类来处理，这就是SmartLifecycle。
  
spring中编程式事务管理：TransactionTemplate（提供了回调方法execute , 需注入PlatformTransactionManager--springboot已自动注入）
  https://docs.spring.io/spring-framework/docs/3.0.0.M4/reference/html/ch10s06.html
  import java.sql.Connection;
  Connection connection = dataSource.getConnection(); // (1)
  try (connection) {
      connection.setAutoCommit(false); // (2)
      // execute some SQL statements...
      connection.commit(); // (3)
  } catch (SQLException e) {
      connection.rollback(); // (4)
  }
  
  import java.sql.Connection;
  // isolation=TransactionDefinition.ISOLATION_READ_UNCOMMITTED
  connection.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED); // (1)
  // propagation=TransactionDefinition.NESTED
  Savepoint savePoint = connection.setSavepoint(); // (2)
  ...
  connection.rollback(savePoint);
  ** spring中的事务传播中的嵌套事务就是savepoints的利用。
  transaction management simply means: How does Spring start, commit or rollback JDBC transactions。？？？？
  
  hibernate style:
  public class UserService {
    @Autowired
    private SessionFactory sessionFactory; // (1)
    public void registerUser(User user) {
        Session session = sessionFactory.openSession(); // (2)
        // lets open up a transaction. remember setAutocommit(false)!
        session.beginTransaction();
        // save == insert our objects
        session.save(user);
        // and commit it
        session.getTransaction().commit();
        // close the session == our jdbc connection
        session.close();
    }
}

@Service
public class UserService {
    @Autowired
    private SessionFactory sessionFactory; // (1)
    @Transactional
    public void registerUser(User user) {
        sessionFactory.getCurrentSession().save(user); // (2)
    }
}
DataSourcePlatformTransactionManager ，HibernateTransactionManager ，JpaTransactionManager
--------------------------------------------
Spring Security
FilterChain: servlet容器提供，里面有一个list存储一堆filter
SecurityFilterChain： 其默认实现是一个DefaultSecurityFilterChain（其里面默认有15个Filter，执行顺序按list顺序）
how to add a customer filter before securityfilter or add a filter to security's filterchain???
-- HttpSecurity.addFilterBefore(...)
How to configure Spring Security: WebSecurityConfigurerAdapter??
1. Is annotated with @EnableWebSecurity.
2. Extends WebSecurityConfigurer, which basically offers you a configuration DSL/methods. With those methods, 
    you can specify what URIs in your application to protect or what exploit protections to enable/disable.
    
?????How to use Spring Security’s configure DSL????
    https://www.marcobehler.com/guides/spring-security#security-examples
----------------------------------------

https://www.testcontainers.org/：  数据库集成测试

Redis Keyspace Notifications： key通知实现定时任务，Redis的延迟队列基于有序集合，score为执行时间戳，value为任务实体或任务实体引用

Spring Security默认过滤器链： org.springframework.security.config.annotation.web.builders.FilterComparator，参考https://www.felord.cn/spring-security-filters.html

javax.validation.groups  &  Validation 参数校验

事件驱动，这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以“去耦合”（decoupling），有利于实现模块化。
缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。阅读代码的时候，很难看出主流程。


