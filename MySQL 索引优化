explain
select  useraccoun0_.id                               as col_0_0_,
                useraccoun0_.delete_state                     as col_1_0_,
                useraccoun0_.locked_state                     as col_2_0_,
                useraccoun0_.password                         as col_3_0_,
                useraccoun0_.mobile_number_verification_state as col_4_0_,
                useraccoun0_.app_id                           as col_5_0_,
                useraccoun0_.mobile_number                    as col_6_0_,
                useraccoun0_.email_verification_state         as col_7_0_,
                useraccoun0_.email                            as col_8_0_,
                useraccoun0_.creator_id                       as col_9_0_,
                useraccoun0_.create_time                      as col_10_0_,
                useraccoun0_.user_name                        as col_11_0_,
                useraccoun0_.expiration_time                  as col_12_0_,
                useraccoun0_.last_operator_id                 as col_13_0_,
                useraccoun0_.last_operator_time               as col_14_0_,
                useraccoun0_.login_time                       as col_15_0_,
                useraccoun0_.user_type                        as col_16_0_,
                useraccoun0_.user_source                      as col_17_0_,
                userbasici1_.id                               as col_18_0_,
                userbasici1_.real_name                        as col_19_0_,
                userbasici1_.delete_state                     as col_20_0_,
                userbasici1_.order_number                     as col_21_0_,
                d.id,  d.name

from user_account useraccoun0_ ignore index(UK_n581kgbdmb1ruhd047l51wn0a)
         left  join user_basic_info userbasici1_ on (useraccoun0_.id = userbasici1_.id)
          left  join user_department userdepart2_  ignore index (user_department_user_id_index) on (useraccoun0_.id = userdepart2_.user_id)
         left join department d on d.id = userdepart2_.department_id

where
     -- useraccoun0_.user_type in (1,3)
     useraccoun0_.user_type = 2
  and useraccoun0_.delete_state = 'ACTIVE'
  and useraccoun0_.is_init = 0
 order by useraccoun0_.order_number desc, useraccoun0_.create_time desc, useraccoun0_.user_name desc
limit 10 ;

--------------执行计划----------------------
1	SIMPLE	useraccoun0_		ALL					8767	0.1	Using where; Using temporary; Using filesort
1	SIMPLE	userbasici1_		eq_ref	PRIMARY	PRIMARY	146	baseline_auth.useraccoun0_.id	1	100	
1	SIMPLE	userdepart2_		ALL					9425	100	Using where; Using join buffer (Block Nested Loop)
1	SIMPLE	d		eq_ref	PRIMARY	PRIMARY	146	baseline_auth.userdepart2_.department_id	1	100	

user_account 与 user_department 2个表都是ALL，user_department是中间一个关系表，其中没有索引，直接扫描了9425条记录，与主表关联后，查询时间在40秒左右。

1、去除排序语句后，执行速度很快，在几百毫秒（去除排序语句后，Using filesort消失）
由于排序是业务必须，不能去，对排序字段做联合索引，Using filesort 依旧

2、对user_department的关联关系表加了User_id列的索引，速度瞬间提高到200毫秒（注意对左右关联表使用索引效果甚佳），执行计划如下：
  1	SIMPLE	useraccoun0_		ALL					8767	0.1	Using where; Using filesort
  1	SIMPLE	userbasici1_		eq_ref	PRIMARY	PRIMARY	146	baseline_auth.useraccoun0_.id	1	100	
  1	SIMPLE	userdepart2_		ref	user_department_user_id_index	user_department_user_id_index	146	baseline_auth.useraccoun0_.id	1	100	
  1	SIMPLE	d		eq_ref	PRIMARY	PRIMARY	146	baseline_auth.userdepart2_.department_id	1	100	
  
  如上计划user_department使用了索引，类型为ref。
*****************************************************
left join（左连接）：右表创建索引。
right join（右连接）：左表创建索引。
简记：左右外连接，索引相反建（left：右表建，right：左表建）
******************************************************

------------------------


