SpringSecurity
1.      核心功能： 	认证、授权、攻击防护(防止伪造身份)   
  1.1 原理： 一组过滤器链，所有的请求进出都要经过这些过滤器，通常一种过滤器处理一种认证方式，常见的核心过滤器：
  		UsernamePasswordAuthenticationFilter,BasicAuthenticationFilter，ExceptionTranslationFilter，FilterSecurityInterceptor(请求最后一站，守门人，此处会决定请求是否能访问到RestAPI)
2. 默认实现 -- 零配置：
	 当spring-security jar被加入项目后，默认就会开启basic认证（所有服务都需要basic认证，用户名默认为user，密码会打印到控制台上）74682e70-1462-44d3-8b28-286196fc1a80
	
3. 表单登录
	3.1 配置：javaconfig 覆盖WebSecurityConfigurerAdapter#configure(HttpSecurity http),注意是HttpSecurity参数
	       http.formLogin().and().authorizeRequests().anyRequest().authenticated();（若将formLogin换成httpBasic则使用basic认证）
4. 自定义认证逻辑
	4.1 用户信息获取逻辑
		在spring-security中该部分逻辑被封装在一个接口中：UserDetailService#loadUserByUsername ,而用户信息会被封装在一个叫UserDetails的类中。
	4.2 用户校验逻辑 : 主要是验证密码是否匹配，这个逻辑是由框架完成的，及其他校验如是否冻结，密码是否过期等。主要通过覆盖UserDetails类中的方法来实现
	4.3 密码的加密解密  ： 由另一个接口实现：PasswordEncoder注意该类有多个版本，当前需要使用crypto包中的
	   注意：该类中的encode方法提供给用户自己调用的（在插入数据库之前），而matches方法是由框架来调用的。
5. 个性化用户认证流程
	5.1 自定义登录页面http.formLogin().loginPage("自定义的登录页面")
	5.2 自定义登录成功处理
		默认处理：登录成功会跳转到引发登录操作的一个那个请求去。
		自定义成功处理：实现一个接口AuthenticationSuccessHandler, 添加http.formLogin().successHandler(自定义handler)
	5.3自定义登录失败处理： 类比成功处理，实现接口：AuthenticatonFailureHandler
6. 图形验证码 ，记住我功能
7. 短信验证
