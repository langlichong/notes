SpringSecurity
1.      核心功能： 	认证、授权、攻击防护(防止伪造身份)   
  1.1 原理： 一组过滤器链，所有的请求进出都要经过这些过滤器，通常一种过滤器处理一种认证方式，常见的核心过滤器：
  		UsernamePasswordAuthenticationFilter,BasicAuthenticationFilter，ExceptionTranslationFilter，FilterSecurityInterceptor(请求最后一站，守门人，此处会决定请求是否能访问到RestAPI)
2. 默认实现 -- 零配置：
	 当spring-security jar被加入项目后，默认就会开启basic认证（所有服务都需要basic认证，用户名默认为user，密码会打印到控制台上）74682e70-1462-44d3-8b28-286196fc1a80
	
3. 表单登录
	3.1 配置：javaconfig 覆盖WebSecurityConfigurerAdapter#configure(HttpSecurity http),注意是HttpSecurity参数
	       http.formLogin().and().authorizeRequests().anyRequest().authenticated();（若将formLogin换成httpBasic则使用basic认证）
4. 自定义认证逻辑
	4.1 用户信息获取逻辑
		在spring-security中该部分逻辑被封装在一个接口中：UserDetailService#loadUserByUsername ,而用户信息会被封装在一个叫UserDetails的类中。
	4.2 用户校验逻辑 : 主要是验证密码是否匹配，这个逻辑是由框架完成的，及其他校验如是否冻结，密码是否过期等。主要通过覆盖UserDetails类中的方法来实现
	4.3 密码的加密解密  ： 由另一个接口实现：PasswordEncoder注意该类有多个版本，当前需要使用crypto包中的
	   注意：该类中的encode方法提供给用户自己调用的（在插入数据库之前），而matches方法是由框架来调用的。
5. 个性化用户认证流程
	5.1 自定义登录页面http.formLogin().loginPage("自定义的登录页面")
	5.2 自定义登录成功处理
		默认处理：登录成功会跳转到引发登录操作的一个那个请求去。
		自定义成功处理：实现一个接口AuthenticationSuccessHandler, 添加http.formLogin().successHandler(自定义handler)
	5.3自定义登录失败处理： 类比成功处理，实现接口：AuthenticatonFailureHandler
6. 图形验证码 ，记住我功能
7. 短信验证

------------XSS 过滤 --------------------
1、对于GET 及 post x-www-form-urlencode 或 post mutipart/form-data  可以通过重写HttpServletRequestWrapper中相关getParam系列方法，对@RequestBody方式（request payload）则是通过getInputStream方法读取。
To remove XSS characters you just override AbstractJackson2HttpMessageConverter - this converter has responsibility to read request.inputStream to RequestBody object
@Component
public class XSSRequestBodyConverter extends AbstractJackson2HttpMessageConverter {
    public XSSRequestBodyConverter(ObjectMapper objectMapper) {
        super(objectMapper, MediaType.APPLICATION_JSON, new MediaType("application", "*+json"));
    }

@Override
public Object read(Type type, Class<?> contextClass, HttpInputMessage inputMessage)
        throws IOException, HttpMessageNotReadableException {

    Object requestBody = super.read(type, contextClass, inputMessage);
    //Remove xss from requestBody here
    String requestInStr = objectMapper.writeValueAsString(requestBody);
    return objectMapper.readValue(replaceXSSCharacters(requestInStr), Object.class);
}


}

---demo ---------
public class XssRequestWrapper extends HttpServletRequestWrapper {
    private String body;

    public XssRequestWrapper(HttpServletRequest request) throws IOException {
        super(request);

        StringBuilder stringBuilder = new StringBuilder();
        BufferedReader bufferedReader = request.getReader();
        String line = null;
        while ((line = bufferedReader.readLine()) != null) {
            stringBuilder.append(line);
        }
        body = stringBuilder.toString();

        String method = request.getMethod();
        String contentType = request.getContentType();
        if (StringUtils.isNotEmpty(contentType)) {
            contentType = contentType.toLowerCase();
        }
        // 处理POST请求并且contentType为application/json格式的
        if (HttpMethod.POST.matches(method) && StringUtils.isNotEmpty(contentType) && contentType.contains(MediaType.APPLICATION_JSON_VALUE)) {
            body = this.stripXss(body);
        }
    }

    /**
     * 预编译正则表达式
     */
    static final List<Pattern> ROLES = new ArrayList<Pattern>(){{
        add(Pattern.compile("<script>(.*?)</script>", 2));
        add(Pattern.compile("src[\r\n]*=[\r\n]*\\'(.*?)\\'", 42));
        add(Pattern.compile("src[\r\n]*=[\r\n]*\\\"(.*?)\\\"", 42));
        add(Pattern.compile("</script>", 2));
        add(Pattern.compile("<script(.*?)>", 42));
        add(Pattern.compile("eval\\((.*?)\\)", 42));
        add(Pattern.compile("e\u00adxpression\\((.*?)\\)", 42));
        add(Pattern.compile("javascript:", 2));
        add(Pattern.compile("vbscript:", 2));
        add(Pattern.compile("onload(.*?)=", 42));
    }};

    @Override
    public String[] getParameterValues(String parameter) {
        String[] values = super.getParameterValues(parameter);
        if (values == null) {
            return null;
        } else {
            int count = values.length;
            String[] encodedValues = new String[count];

            for(int i = 0; i < count; ++i) {
                encodedValues[i] = this.stripXss(values[i]);
            }

            return encodedValues;
        }
    }

    @Override
    public String getParameter(String parameter) {
        String value = super.getParameter(parameter);
        return this.stripXss(value);
    }

    @Override
    public String getHeader(String name) {
        return super.getHeader(name);
    }

    @Override
    public String getQueryString() {
        String value = super.getQueryString();
        if (value != null) {
            value = this.stripXss(value);
        }

        return value;
    }


    /**
     * 重写 getInputStream()方法
     * 在使用@RequestBody注解的时候，其实框架是调用了getInputStream()方法
     */
    @Override
     public ServletInputStream getInputStream() throws IOException {
        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_8));
        return new ServletInputStream() {
            @Override
            public boolean isFinished() {
                return false;
            }

            @Override
            public boolean isReady() {
                return false;
            }

            @Override
            public void setReadListener(ReadListener readListener) {

            }

            @Override
            public int read() throws IOException {
                return byteArrayInputStream.read();
            }
        };
    }

    private String stripXss(String value) {
        if (value != null) {
            for (Pattern role : ROLES) {
                value = role.matcher(value).replaceAll("");
            }

            // 特殊符号转义
            value = value.replaceAll("<", "&lt;").replaceAll(">", "&gt;");
        }

        return value;
    }
}
----------重复读取requestBody------------
Spring provides a ContentCachingRequestWrapper class. This class provides a method, getContentAsByteArray() to read the body multiple times.
This class has a limitation, though:  We can't read the body multiple times using the getInputStream() and getReader() methods.
This class caches the request body by consuming the InputStream. If we read the InputStream in one of the filters, then other subsequent filters in the filter chain can't read it anymore. Because of this limitation, this class is not suitable in all situations.

create a new class – CachedBodyHttpServletRequest – which extends HttpServletRequestWrapper. This way, we don't need to override all the abstract methods of the HttpServletRequest interface.
HttpServletRequestWrapper class has two abstract methods getInputStream() and getReader(). We'll override both of these methods and create a new constructor.
public class CachedBodyHttpServletRequest extends HttpServletRequestWrapper {

    private byte[] cachedBody;

    public CachedBodyHttpServletRequest(HttpServletRequest request) throws IOException {
        super(request);
        InputStream requestInputStream = request.getInputStream();
        this.cachedBody = StreamUtils.copyToByteArray(requestInputStream);
    }
}
@Override
public ServletInputStream getInputStream() throws IOException {
    return new CachedBodyServletInputStream(this.cachedBody);
}
@Override
public BufferedReader getReader() throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(this.cachedBody);
    return new BufferedReader(new InputStreamReader(byteArrayInputStream));
}
