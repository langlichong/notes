CORS与同源政策

同源策略：
  出于安全的考虑一个站点的资源禁止访问其他不同源的资源，其中浏览器就是同源策略的一个实现产品之一。
  
同源：指的是请求协议、目标主机域名、请求的端口等都需要相同，才是同源。

浏览器中同源策略的表现： DOM 同源策略和 XMLHttpRequest 同源策略
    DOM同源：没有 DOM 同源策略，也就是说不同域的 iframe 之间可以相互访问，那么黑客可以这样进行攻击
    XMLHttpRequest同源：如果 没有XMLHttpRequest 同源策略，那么黑客可以进行 CSRF（跨站请求伪造） 攻击（主要通过接受目标网站的cookie来侵害）
    
CORS： cross-origin-resource-sharing 即跨域资源共享
  如果只有同源策略，那么很多功能都需要repeat，资源就不能真的共享（我的你访问不了，你的我也无法访问），于是出现了CORS。
  CORS是一个 W3C 标准，定义了在必须访问跨域资源时，浏览器与服务器应该如何沟通。
  
 CORS 背后的基本思想，就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。
 
 *****CORS 需要浏览器和服务器同时支持********
 整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，
 有时还会多出一次附加的请求，但用户不会有感觉。
 
 *******因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信*********
 =====================================================================
 
 浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。
 
 简单请求-----------
1、在请求中需要附加一个额外的 Origin 头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部信息来决定是否给予响应。
    例如：Origin: http://www.laixiangran.cn
2、如果服务器认为这个请求可以接受，就在 Access-Control-Allow-Origin 头部中回发相同的源信息（如果是公共资源，可以回发 * ）。
  例如：Access-Control-Allow-Origin：http://www.laixiangran.cn
3、没有这个头部或者有这个头部但源信息不匹配，浏览器就会驳回请求。正常情况下，浏览器会处理请求。注意，请求和响应都不包含 cookie 信息。
4、如果需要包含 cookie 信息，ajax 请求需要设置 xhr 的属性 withCredentials 为 true
     服务器需要设置响应头部 Access-Control-Allow-Credentials: true
非简单请求-----------------
浏览器在发送真正的请求之前，会先发送一个 Preflight 请求给服务器，这种请求使用 OPTIONS 方法，发送下列头部：
Origin：与简单的请求相同。
Access-Control-Request-Method: 请求自身使用的方法。
Access-Control-Request-Headers: （可选）自定义的头部信息，多个头部以逗号分隔。

----第一次发送非简单请求时会多一次请求。-----

JSONP 跨域 ----只支持 GET 请求
由于 script 标签不受浏览器同源策略的影响，允许跨域引用资源。
因此可以通过动态创建 script 标签，然后利用 src 属性进行跨域，这也就是 JSONP 跨域的基本原理。
// 1. 定义一个 回调函数 handleResponse 用来接收返回的数据
function handleResponse(data) {
    console.log(data);
};
// 2. 动态创建一个 script 标签，并且告诉后端回调函数名叫 handleResponse
var body = document.getElementsByTagName('body')[0];
var script = document.gerElement('script');
script.src = 'http://www.laixiangran.cn/json?callback=handleResponse';
body.appendChild(script);
// 3. 通过 script.src 请求 `http://www.laixiangran.cn/json?callback=handleResponse`，
// 4. 后端能够识别这样的 URL 格式并处理该请求，然后返回 handleResponse({"name": "laixiangran"}) 给浏览器
// 5. 浏览器在接收到 handleResponse({"name": "laixiangran"}) 之后立即执行 ，
也就是执行 handleResponse 方法，获得后端返回的数据，这样就完成一次跨域请求了

图像 Ping 跨域
由于 img 标签不受浏览器同源策略的影响，允许跨域引用资源。因此可以通过 img 标签的 src 属性进行跨域，这也就是图像 Ping 跨域的基本原理。

服务器代理----服务器代理是万能的
浏览器有跨域限制，但是服务器不存在跨域问题，所以可以由服务器请求所要域的资源再返回给客户端。
