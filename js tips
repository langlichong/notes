----------------------事件循环-------------------
Js中存在三种数据结构：call stack , message queue（用户触发的点击、键盘事件或setTimeout等触发的任务） , ES6 Job Queue（处理Promise回调）

优先级：先call stack , call stack为空时候执行message queue中

优先级：先call stack , call stack为空时候执行message queue中

Calling setTimeout(() => {}, 0) will execute the function at the end of next tick, 
much later than when using nextTick() which prioritizes the call and executes it just before the beginning of the next tick.

？？setImmediate() 与 setTimeout(() => {}, 0) (passing a 0ms timeout)与 process.nextTick() 区别？？
A function passed to process.nextTick() is going to be executed on the current iteration of the event loop, 
after the current operation ends. This means it will always execute before setTimeout and setImmediate.
A setTimeout() callback with a 0ms delay is very similar to setImmediate(). The execution order will depend on various factors, 
but they will be both run in the next iteration of the event loop.

--Zero delay---
If you specify the timeout delay to 0, the callback function will be executed as soon as possible, but after the current function execution。

----------------Async------------
Asynchronous means that things can happen independently of the main program flow.
error-first callbacks: the first parameter in any callback function is the error object: 

--------------promise-----------------------------
Alternatives to callbacks（callback hell代方案）: Promises (ES6) and Async/Await (ES2017).
Promise: resolved state or rejected state or pending state
使用Promise: 利用Promise构造函数 new Promise
const fs = require('fs')

const getFile = (fileName) => {
  return new Promise((resolve, reject) => {
    fs.readFile(fileName, (err, data) => {
      if (err) {
        reject(err)  // calling `reject` will cause the promise to fail with or without the error passed as an argument
        return        // and we don't want to go any further
      }
      resolve(data)
    })
  })
}

getFile('/etc/passwd')
.then(data => console.log(data))
.catch(err => console.error(err))
----------------------------------------------
-------------promis chain-----------------
A promise can be returned to another promise, creating a chain of promises
const status = response => {
  if (response.status >= 200 && response.status < 300) {
    return Promise.resolve(response)
  }
  return Promise.reject(new Error(response.statusText))
}

const json = response => response.json()

fetch('/todos.json')
  .then(status)    // note that the `status` function is actually **called** here, and that it **returns a promise***
  .then(json)      // likewise, the only difference here is that the `json` function here returns a promise that resolves with `data`
  .then(data => {  // ... which is why `data` shows up here as the first parameter to the anonymous function
    console.log('Request succeeded with JSON response', data)
  })
  .catch(error => {
    console.log('Request failed', error)
  })
  
--------Promise.all([fun1,fun2,fun3...])  Promise.race-------------
-------------------------------------------------------------------------------
