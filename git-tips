---------------Git 找回丢失代码----------------------------------------
A： 提交了 feature1 到 feature6 六个commit
B：	git reset --hard feature1
B:  git commit -m'feature7'

Q: 如何恢复feature1...feature6同时保存feature7 
Answer: git reflog  ,git cherry-pick 
git reflog 会看到之前提交的feature1...feature7 所有记录，记录好feature6 与feature7 commit-id ，
git reset  --hard  feature6-commit-id  -- 找回前六次所有代码，此时feature7丢失
git cherry-pick feature7-commit-id  -- 找回feature7 代码


---------git worktree checkout多个分支----------
比如featureA在开发中, featureB开发完成在测试中. 你正在featureA上开发, 测试忽然提了一个bug, 你需要checkout到featureB去修复. 
修复后checkout回featureA, 但是你发现gradle需要同步, java需要重新编译, 你需要10分钟甚至更久才能恢复到你原来的代码状态. 
这样的bug来几次, 你就要疯了, 然后觉得git clone代码, 放在不同的文件夹下是个挺好的主意. 需要checkout时, 就去不同的文件夹checkout, 相互不影响挺好.

使用 git worktree add …/locat_dir brach_name检出分支到指定文件夹.
这样在local_dir里的修改, 在主git库里是没有反应的, 也就不用担心一个分支的修改影响另外一个分支. 
不用担心, 这个检出的分支仍然是git托管的, 你可以正常的commit/push/pull/merge/rebase, 并且这个分支的stash是显示在git主库里的

---git worktree 命令可在不同文件夹中打开同一个 git 仓库的不同分支，很好的解决不同分支 node_modules 依赖冲突的问题--
由于 node_modules 文件夹是在 .gitignore 之中的，git 不会对其有任何记录或操作，因此不同分支不会有自己独立的 node_modules，使用 git checkout 命令切换时，项目里还是同一个 node_modules 文件夹。
此时在各分支直接执行 npm install 的话，各分支 package.json 中对应的依赖都会被放到同一个 node_modules 文件夹。如果同一个依赖不同分支的版本不一致，则会冲突覆盖，发生问题。
以上问题，究其原因是 git checkout 命令是在同一个文件夹中切换不同分支。
怎么解决呢，一个思路是不同的分支 clone 到不同的文件夹，但这样就是相互完全独立的仓库了，不能merge

Git worktree严格意义上说已经不是一个新的功能了，它推出也已经好几年了，是在2015年7月发布的2.5版引入的。Worktree是链接到统一仓库的多个工作区(目录，树)。
一个git仓库可以支持多个工作树，分别对应不同的分支。我们在git中通过"git init"或"git clone"创建一个(主)工作区(树)(main working tree)。
同理，我们使用git worktree创建一个(和工作区)不同目录的工作区(树)，我们称之为为"链接工作区(树)(linked working tree)"。
git仓库有一个主工作树(裸库)和零个或多个链接工作树。与重建的孤立的目录不同，链接工作树和主仓库直接就行分支一样是有机关联的，任何一个链接工作树的变更提交都在仓库内部。
链接工作树用完后，可以直接通过git worktree remove删除
.

-------------------------------------------------------------------------------------------
