从 JVM 类加载流程来看，字节码转换器的执行方式有两种：一种是在 main 方法执行之前，通过 premain 来实现，另一种是在程序运行中，通过 Attach Api 来实现。

对于 JVM 内部的 Attach 实现，是通过 tools.jar 这个包中的 com.sun.tools.attach.VirtualMachine 以及  VirtualMachine.attach(pid) 这种方式来实现的。
底层则是通过 JVMTI 在运行前或者运行时，将自定义的 Agent 加载并和 VM 进行通信.

1、premain目标： 拦截spring MVC 中@Controller 及 @RestController 类中的 @Get/@Put/@PostMaping 标注的方法后打印其参数及执行时间

  实现方式：byte-buddy + javaagent(premain)
   A、随便定义一个controller 
      @RestController
      public class Hello {

          @GetMapping("/hello")
          public String hello() {
              return "hello";
          }

          @PostMapping("/say")
          public String say(@RequestParam("word") String word) {
              return "say: " + word;
          }
      }
      
     B、pom文件加入依赖及插件
        dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy</artifactId>
            <!--<version>1.12.2</version>-->
            <version>1.11.20</version>
        </dependency>

        plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifestEntries>
                           <!-- 此处指明代理的入口类 -->
                            <Premain-Class>com.huhu.agent.AgentMain</Premain-Class>
                        
                            <Can-Redefine-Classes>true</Can-Redefine-Classes>
                            <Can-Retransform-Classes>true</Can-Retransform-Classes>
                        </manifestEntries>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
    C、写一个agent入口类： 包含一个premain方法：
    public class AgentMain {


              public static void premain(String agentArgs, Instrumentation instrumentation){

                  // 拦截controller

                  // 拦截spring controller
                  AgentBuilder.Identified.Extendable builder1 = new AgentBuilder.Default()
                          // 拦截@Controller 和 @RestController的类
                          .type(
                                  ElementMatchers.isAnnotatedWith(
                                          ElementMatchers.named("org.springframework.stereotype.Controller")
                                          .or(
                                                  ElementMatchers.named("org.springframework.web.bind.annotation.RestController")
                                          )
                                  )
                          ).transform((builder, typeDescription, classLoader, javaModule) ->
                                  // 拦截 @Get/Post/Put/DeleteMapping
                                  builder.method(
                                          ElementMatchers.isPublic().and(
                                                  ElementMatchers.isAnnotatedWith(
                                                      ElementMatchers.nameStartsWith("org.springframework.web.bind.annotation")
                                                      .and(ElementMatchers.nameEndsWith("Mapping"))
                                                  )
                                          )
                                  )// 拦截后交给 ControllerInterceptor 处理
                                  .intercept(MethodDelegation.to(ControllerInterceptor.class))
                          );

                  // 装载到 instrumentation 上
                  builder1.installOn(instrumentation);

              }
          }
          
    D、编写代理的片段代码：AgentMain中配置的ControllerInterceptor类：
          @Slf4j
          public class ControllerInterceptor {

              @RuntimeType
              public static Object intercept(@Origin Method method,
                                             @AllArguments Object[] args,
                                             @SuperCall Callable<?> callable) {

                  log.info("before controller: {}", method.getName());
                  log.info("args: {}", Arrays.toString(args));

                  long start = System.currentTimeMillis();
                  try {
                      Object res = callable.call();
                      log.info("result: {}", res);
                      return res;
                  } catch(Exception e) {
                      log.error("controller error: ", e);
                  } finally {
                      long end = System.currentTimeMillis();
                      log.info("after controller execute in {} ms", end - start);
                  }
                  return null;
              }
          }
          
    E、打包代理为jar:  mvn assembly:single ， 加入打包后的jar为  agent.jar  位置在E盘
    F、配置spring-boot项目的vm启动参数：-javaagent:E:\\agent.jar ，启动项目
    G、访问接口：验证是否有日志输出
 
 
---------------------------------------attach API---------------------
2、byte-buddy attach方式
   定义模板代码
    class ConstructionTemplate {

        @Advice.OnMethodExit
        static void exit(@Advice.This Object self) {
            new RuntimeException("Created: " + self).printStackTrace();
        }

    }

    class CloseTemplate {

        @Advice.OnMethodEnter
        static void enter(@Advice.This Object self) {
            new RuntimeException("Closed: " + self).printStackTrace();
        }

    }

  // 匹配方法和代理
  public class TracingAgent {

      public static void agentmain(String arg, Instrumentation inst) {
          new AgentBuilder.Default()
                  // by default, JVM classes are not instrumented
                  .ignore(none())
                  .disableClassFormatChanges()
                  .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)
                  .type(isSubTypeOf(Closable.class))
                  .transform((builder, type, loader) -> builder
                          .visit(Advice
                                  .to(ConstructionTemplate.class)
                                  .on(isConstructor()))
                          .visit(Advice
                                  .to(CloseTemplate.class)
                                  .on(named("close").and(takesArguments(0)))
                          ))
                  .installOn(inst);
      }

  }

  Byte Buddy 还提供了在运行时附加一个代理的便利方法。为了应对 tools.jar 位置和虚拟机类型的差异, 
  Byte Buddy 给附件添加了一个抽象层，在这一层可以自动检测到正确的设置。在将上述的代理打包到一个 JAR 文件中之后，
  就可以通过调用如下代码来附加到发生资源泄漏的进程：
    File jarFile = getAgent();
    String processId = getProcessId();
    ByteBuddyAgent.install(jarFile, processId);

