接口优化：
 1、索引： 
	是否加了索引（where\orderby\or\\on），
	索引是否生效，失效原因：
		不满足最左匹配，范围索引没放最后，使用了select * ， 索引列上有计算或使用了函数，字符类型未加引号，like左侧是%
	索引是否选错: 可能是数据库引擎原因，必要时考虑使用 force index 或相反操作
	
 2、SQL优化
	索引优化没效果，可试着改造SQL，其优化代价小于直接优化代码
	避免使用selec * ,union all 代替union,小表驱动大表，in中值太多，增量查询，连接查询代替子查询，join的表数量过多
	
	in 适用于左边大表，右边小表（select * from 大表 where x_id in (select x_id from 小表) 子查询优先执行，数据量又少）。 exists 适用于左边小表，右边大表

 3、远程调用：
	某次业务查询中，需要返回的数据总体需要调用多个其他服务接口后再组装返回，多个远程接口顺序调用导致响应时间长。
	并发调用优化：
		并发请求：java8前使用Callable接口，获取线程的执行结果，java8后使用CompleteFuture.supplyAsync实现，注意线程尽量选择线程池实现，不要自己创建野生线程。
		数据异构：冗余存储数据到某处（表、缓存等），后续直接查询一个地方即可。注意：使用缓存可能需要面对数据一致性问题。
 4、重复调用：
		循环查询数据库，无限递归（最好程序中设定一个深度检查，达到预定深度返回即可）
 5、异步处理
    如：业务接口中需要发送短信、邮件、站内通知、记录日志等 （这些都是非核心逻辑，有延迟响应可以接受）
	异步优化：多线程 和 MQ 
		多线程：发送通知、记录日志等操作发送到线程池中等待处理（类似chromium 线程模型及消息循环处理，command模式，产生command与执行command分开）
		mq: 同步发送mq消息（发消息本身占用时间较短）
 6、避免大事务
	如：spring中在类或者方法上直接使用@Transactional 做事务，容易造成大事务（粒度太大，包含了不需要执行事务的操作，如read一类操作）
	大事务容易引发：死锁，回滚时间长，锁等待，接口超时，并发情况下数据库连接池被占满。
	优化：尽量少用@Transactional ，将查询（select）一类放到事务外边，事务中避免远程调用，有些功能可以免事务运行或者异步化处理
 7、锁粒度
		锁粒度太粗，可能引发接口性能问题，如，synchronized可以方法上也可以代码片段上
		synchronized可以保证单节点上同步，但是对于多节点就需要分布式锁协助（如，Redis分布式锁，zookeeper方式，rdbms方式等）。
 8、分页处理：
	大数据量的查询，如传递大量的id信息给远程接口导致接口超时或者响应迟钝，此时可以考虑分页处理，需考虑同步与异步调用。
	使用guava的Lists.partition方法
	List<List<Long>> allIds = Lists.partition(ids,200); for(List<Long> batchIds:allIds) {    List<User> users = remoteCallUser(batchIds); 
	若使用异步，可以考虑CompleteFuture：
	List<List<Long>> allIds = Lists.partition(ids,200); final List<User> result = Lists.newArrayList(); allIds.stream().forEach((batchIds) -> {    CompletableFuture.supplyAsync(() -> {         result.addAll(remoteCallUser(batchIds));         return Boolean.TRUE;     }, executor); })
	
 9、加缓存：如jedis和redisson等，需分情况，考虑数据一致性问题及数据同步。 
	除了请求远程缓存服务器（请求毕竟需要耗费时间），还可以考虑二级缓存（能否不经过远程调用，而直接获取数据呢），
	基于内存的缓存，可以考虑缓存框架：内存缓存框架有：guava、Ehcache、caffine等。
	
 10、分库分表
		有时候，接口性能受限，不是程序或其他原因，就是因为数据库本身问题（数据库页存在瓶颈，尤其面对大数据量），此时考虑大拆小策略。
		
性能排查需要足够信息，可以使用在项目中做一些辅助措施：如慢查询监控报警、调用链路跟踪（skywalking）
