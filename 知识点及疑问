知识点
Java IO:
    BIO: blocking IO   , NIO: Non-blocking IO , AIO: Async IO 
    本质：三者本质都是讲某个线程发起系统调用时候，该线程的IO所处的一种状态或者是处理逻辑
    BIO: 线程发起系统调用，如read操作，内核发起请求并准备数据，当内核数据未贮备好时候，该线程就处于一种干等（死等）状态。
    NIO: 线程发起请求后，在内核还未将数据复制到用户空间时候，线程要不断来询问数据是否准备好，类似轮训，直到数据可用。
    多路复用IO: 有poll，epoll，select等方式，该方式下，一个线程可以处理多个网络请求IO,不同于NIO是，NIO中轮询是用户线程发起的，而多路复用是调用操作系统的select、epoll等方式。
    AIO: 线程发起请求后即可去干其他事，等待操作系统内核准备好数据后通知应用程序。 java 1.7 才引入。
        Java中可通过以下两种方式实现：
            一种是基于”回调”，我们可以实现CompletionHandler接口，在调用时把回调函数传递给对应的API即可。
            一种是返回一个Future。处理完别的事情，可以通过isDone()可查看是否已经准备好数据，通过get()方法等待返回数据。

spring框架是如何跟servlet容器连接起来的：请求是如何从spring传递到tomcat，又是如何从tomcat流出来的？
  org/apache/catalina/startup/Authenticators.properties

spring事务方法嵌套：同一个表等待锁问题，表的锁的粒度-- count（*） 锁表？ select  ?  update .. where id = ?

Servlet异步化:
    （>=3.0），AsyncContext , tomcat线程池  javax.servlet.ServletRequest#startAsync()
    DeferredResult 与 异步 CountDownLatch/Phaser ，CountDownLatch需要耦合到代码中，CompletableFuture.allOf，
    CompletableFuture独立使用需要依赖我们自己的线程池   Fork/Join：ForkJoinTask 和 ForkJoinPool。
    java.util.concurrent.locks.LockSupport#parkjavax.servlet.ServletRequest#startAsync()
org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory
索引：  cluster index non-cluster-index 区别？
并发：Executors VS ThreadPoolExecutor ， ScheduledThreadPoolExecutor 与 @Schedule 关系 @Scheduled是在容器初始化完毕之后，才开始丢给Java的框架去执行的
web 大文件上传：断点续传 or other ?

Tomcat 与 Spring转承启合：发起http请求后tomcat转发请求到我们的DispatcherServlet的全过程？？？
    Tomcat Connector,NioEndpoint等
    org.apache.catalina.core.ApplicationFilterChain#internalDoFilter
    主要流程是
    1、根据配置信息启动了一个ServerSocket
    2、启动了多个Poller线程类来接受请求
    3、接受到http请求后扔给SocketProcessorBase线程来处理
    4、SocketProcessorBase执行后最终把请求扔到了DispatcherServlet的doService方法处理
    5、doService基于spring mvc调用Controller请求并且返回数据给浏览器渲染
    
用户文件空间限制？？
BeanPostProcessor？？
graphql 重构？
ReentrantLock
AnnotationAwareAspectJAutoProxyCreator？
针对bean的生命周期，我们究竟能做哪些工作？
AopContext使用场景
CopyOnWriteArrayList和CopyOnWriteArraySet
select page(); 页大小影响？？？
将表的【启用超长记录】打开？？？
多线程中事务控制 ？
    springboot 编程式事务 ？TransactionTemplate
    PreparedStatement 下事务控制？
    JDBCTemplate事务控制？
    suspends and resumes transactions？？
    TransactionCallbackWithoutResult ？
    DefaultTransactionDefinition？
    长事务 超时
    异步任务与事务
    多线程与事务： threadlocal 与事务关系 Thread local value set by one thread cannot be accessed by another thread  InheritableThreadLocal
    TransactionInterceptor & DataSourceTransactionManager
    TransactionSynchronizationManager 
ServletRequestUtils、DataSourceUtils、TransactionSynchronizationManager

spring可以支持Callable.class,WebAsyncTask.class,DeferredResult.class,ListenableFuture.class,CompletionStage.class这5种类型的异步，
    当返回值解析器收到这5种类型后，就会开启request的异步，前两者直接通过我们提供的线程池去执行，不提供有一个simple的。后三种得我们自己执行业务。
    执行完毕后都会有一个DeferredResult接受我们处理的结果，这5种方式的结果最终都会被保存在WebAsyncManager中，且WebAsyncManager是和request绑定，
    每个request都会有一个自己的WebAsyncManager。结果保存后，就会调用asyncContext.dispatch();重新派发一次请求，将WebAsyncManager中的结果返回给浏览器。
***WebAsyncManager****
    org.springframework.web.context.request.AsyncWebRequestInterceptor
    
ConcurrentModifiedException 原因分析
Springboot Conditional注解使用：根据数据源类型动态注入相关类（达梦与MySQL，策略模式）
如何理解IT中的suspend(挂起)？？？

请求负载形式：
    post 请求：Requestpayload 与 form-data

spring 参数绑定原理(自定义参数解析注解)
    @RequestParam RequestParamMethodArgumentResolver
    @RequestBody的解析器为PathVariableMethodArgumentResolver
    WebMvcConfigurer
    org.springframework.core.convert.ConversionService
    HandlerAdapter配置的HttpMessageConverters来解析HttpEntity中的数据

工作流：
    Activiti Cloud、Activiti Core
    https://bpmn.io/
    Activiti Modeler: add-on compoment to core
    The Activiti Modeler is an add-on component to the core Activiti framework and has to be deployed via a separate installation script
    Multiple-task-instance

    org.activiti.engine.TaskService#claim
    候选用户candidateUser和候选组candidateGroup
    通过claim设置办理人(签收 )
    Activiti实现会签是基于多实例任务，将节点设置成多实例，主要通过在UserTask节点的属性上配置
    为了更好的实现会签可以结合监听功能处理，非必选项

    API:
    TaskRuntime  ProcessRuntime 
    TaskPayloadBuilder etc.
    TaskRuntimeEventListener

    Best Practise:  see its comment tips , org.activiti.engine.api.internal.Internal
Arch-linux:
    lsblk ， networkctl , ip link , 
    systemd机制下：网络，防火墙，本地域名及其他基础配置，配置文件默认位置及语法。
    systemd-networkd控制网络（linux下有哪些出名的网络管理器或服务组件）
    Systemd.unit: service,socket,mount,dev
    unit借鉴了windows的ini 配置文件语法
    ini: 配置文件(keys, sections,comments),如，mysql配置文件
    https://wiki.archlinux.org/index.php/Systemd-networkd#Wired_adapter_using_a_static_IP
-----java 并发-----------------
--线程池--------https://segmentfault.com/a/1190000019922506?utm_source=sf-similar-article
   核心参数：corePollSize,maxPoolSize,keepAliveTime,BlockingQueue,ThreadFactory,RejectedExecutionHandler-饱和策略
ThreadPoolTaskExecutor 其他知识点汇总(待补充)
线程池中的所有线程超过了空闲时间都会被销毁么？
如果allowCoreThreadTimeOut为true，超过了空闲时间的所有线程都会被回收，不过这个值默认是false，系统会保留核心线程，其他的会被回收

空闲线程是如何被销毁的？
所有运行的工作线程会尝试从队列中获取任务去执行，超过一定时间（keepAliveTime）还没有拿到任务，自己主动退出

核心线程在线程池创建的时候会初始化好么？
默认情况下，核心线程不会进行初始化，在刚开始调用线程池执行任务的时候，传入一个任务会创建一个线程，直到达到核心线程数。不过可以在创建线程池之后，调用其prestartAllCoreThreads提前将核心线程创建好。

--------数据库-----------------
InnoDB tables arrange your data on disk to optimize queries based on primary keys. 
Each InnoDB table has a primary key index called the clustered index that organizes the data to minimize I/O for primary key lookups

Mysql InnoDB存储引擎它也是有最小存储单位的，叫做页(Page)，默认大小是16kb。
数据库表中的数据都是存储在页里的，那么这一个页可以存放多少条记录呢？
这取决于一行记录的大小是多少，假如一行数据大小是1k，那么理论上一页就可以放16条数据。
当然，查询数据的时候，MySQL也不能把所有的页都遍历一遍，所以就有了索引，InnoDB存储引擎用B+树的方式来构建索引。
聚簇索引就是按照每张表的主键构造一颗B+树，叶子节点存放的是整行记录数据，在非叶子节点上存放的是键值以及指向数据页的指针，同时每个数据页之间都通过一个双向链表来进行链接。
它先将数据记录按照主键排序，放在不同的页中，下面一行是数据页。上面的非叶子节点，存放主键值和一个指向页的指针。

    只要表创建了聚簇索引，它的根节点页号就被记录到某个地方了。
    还有一点，B+树索引本身并不能直接找到具体的一条记录，只能知道该记录在哪个页上，数据库会把页载入到内存，再通过二分查找定位到具体的记录。
现在我们知道了InnoDB存储引擎最小存储单元是页，在B+树索引结构里，页可以放一行一行的数据(叶子节点)，也可以放主键+指针(非叶子节点)。

假如我们的主键id为bigint类型，长度为8字节，而指针大小在InnoDB源码中设置为6字节。这样算下来就是 16384 / 14 = 1170，就是说一个页上可以存放1170个指针。

一个指针指向一个存放记录的页，一个页里可以放16条数据，那么一颗高度为2的B+树就可以存放 1170 * 16=18720 条数据。同理，高度为3的B+树，就可以存放 1170 * 1170 * 16 = 21902400 条记录。
理论上就是这样，在InnoDB存储引擎中，B+树的高度一般为2-4层，就可以满足千万级数据的存储。查找数据的时候，一次页的查找代表一次IO，那我们通过主键索引查询的时候，其实最多只需要2-4次IO就可以了。

ibd文件就是表数据文件。这个文件会随着数据库表里数据的增长而增长，不过它始终会是16k的整数倍

我们不仅需要了解页，还需要知道，在InnoDB引擎中，页并不是只有一种。常见的页类型有
---------------------------------------------------------------------

-------------------网关问题-----------------------
线上使用zuul 1.X 版本，自定义表单公众端填报（用户数未知），网关未参数调优，网关负载特别大，导致用户无法访问系统，后续换成spring cloud gateway 暂时可以（疑问：zuul 1.X 性能真这么差？？）
zuul 1.x 线上调优要注意哪些？ 线程数？ 信号量，限流、熔断？超时时间？
----zuul 1.x  主要缺点是连接数限制，容易耗尽容器的线程池--------------
Zuul1 设计比较简单，代码不多也比较容易读懂，它本质上就是一个同步 Servlet，采用多线程阻塞模型，。
    同步 Servlet 使用 thread per connection 方式处理请求。简单讲，每来一个请求，Servlet 容器要为该请求分配一个线程专门负责处理这个请求，
    直到响应返回客户端这个线程才会被释放返回容器线程池。如果后台服务调用比较耗时，那么这个线程就会被阻塞，阻塞期间线程资源被占用，不能干其它事情。
    我们知道 Servlet 容器线程池的大小是有限制的，当前端请求量大，而后台慢服务比较多时，很容易耗尽容器线程池内的线程，造成容器无法接受新的请求，Netflix 为此还专门研发了 
    Hystrix熔断组件来解决慢服务耗尽资源问题。

     另外，同步阻塞模式下，容器线程池的数量一般是固定的，造成对连接数有一定限制，当后台服务慢，容器线程池易被耗尽，一旦耗尽容器会拒绝新的请求，
     这个时候容器线程其实并不忙，只是被后台服务调用 IO 阻塞，但是干不了其它事情。

 Zuul2 的设计相对比较复杂，代码也不太容易读懂，它采用了 Netty 实现异步非阻塞编程模型，如上图所示 [图片来自附录 4]。
    一般异步模式的本质都是使用队列 Queue(或称总线 Bus)，在上图中，你可以简单理解为前端有一个队列专门负责处理用户请求，后端有个队列专门负责处理后台服务调用，
     中间有个事件环线程 (Event Loop Thread)，它同时监听前后两个队列上的事件，有事件就触发回调函数处理事件。这种模式下需要的线程比较少，
     基本上每个 CPU 核上只需要一个事件环处理线程，前端的连接数可以很多，连接来了只需要进队列，不需要启动线程，事件环线程由事件触发，没有多线程阻塞问题。
    
        非阻塞模式可以接受的连接数大大增加，可以简单理解为请求来了只需要进队列，这个队列的容量可以设得很大，只要不超时，队列中的请求都会被依次处理。
        另一方面异步模型没有一个明确清晰的请求 ->处理 ->响应执行流程 (call flow)，它的流程是通过事件触发的，请求处理的流程随时可能被切换断开，
        内部实现要通过一些关联 id 机制才能把整个执行流再串联起来，这就给开发调试运维引入了很多复杂性，比如你在 IDE 里头调试异步请求流就非常困难。
        另外 ThreadLocal 机制在这种异步模式下就不能简单工作，因为只有一个事件环线程，不是每个请求一个线程，也就没有线程局部的概念，
        所以对于 CAT 这种依赖于 ThreadLocal 才能工作的监控工具，调用链埋点就不好搞 (实际可以工作但需要进行特殊处理)。
        总体上，异步非阻塞模式比较适用于 IO 密集型 (IO bound) 场景，这种场景下系统大部分时间在处理 IO，CPU 计算比较轻，少量事件环线程就能处理。
        
    --优缺点：线程开销小（需要线程数较少） ，连接数容易扩展，单编程模型复杂，调试运维难，ThreadLocal不work。
    
    Netflix 给出了一个比较模糊的数据，大致 Zuul2 的性能比 Zuul1 好 20% 左右，这里的性能主要指每节点每秒处理的请求数。
    为什么说模糊呢？因为这个数据受实际测试环境，流量场景模式等众多因素影响，你很难复现这个测试数据。
    即便这个 20% 的性能提升是确实的，其实这个性能提升也并不大，和异步引入的复杂性相比，这 20% 的提升是否值得是个问题。
    Netflix 本身在其博文 中也是有点含糊其词，甚至自身都有一些疑问的。 
    
    比较明确的是，Zuul2 在连接数方面表现要好于 Zuul1，也就是说 Zuul2 能接受更多的连接数。
    
     ----Zuul2 的架构，和 Zuul1 没有本质区别，两点变化：---
        前端用 Netty Server 代替 Servlet，目的是支持前端异步。后端用 Netty Client 代替 Http Client，目的是支持后端异步。
        过滤器换了一下名字，用 Inbound Filters 代替 Pre-routing Filters，用 Endpoint Filter 代替 Routing Filter，用 Outbound Filters 代替 Post-routing Filters。

基于上述分析，我的建议是在生产环境中继续使用 Zuul1，原因如下：
    Zuul1 同步编程模型简单，门槛低，开发运维方便，容易调试定位问题。Zuul2 门槛高，调试不方便。
    Zuul1 监控埋点容易，比如和调用链监控工具 CAT 集成，如果你用 Zuul2 的话，CAT 不好埋点是个问题。
    Zuul1 已经开源超过 6 年，稳定成熟，坑已经被踩平。Zuul2 刚开源很新，实际落地案例不多，难说有 bug 需要踩坑。
    大部分公司达不到 Netflix 那个量级，Netflix 是要应对每日千亿级流量，它们才挖空心思搞异步，一般公司亿级可能都不到，Zuul1 绰绰有余。
    Zuul1 可以集成 Hystrix 熔断组件，可以部分解决后台服务慢阻塞网关线程的问题。
    Zuul1 可以使用 Servlet 3.0 规范支持的 AsyncServlet 进行优化，可以实现前端异步，支持更多的连接数，达到和 Zuul2 一样的效果，但是不用引入太多异步复杂性。
     在《微服务架构实战 160 讲》视频课程中，有我关于讲解 Zuul1 如何使用 AsyncServlet 优化连接数的内容。
     
----结论-----
    同步异步各有利弊，同步多线程编程模型简单，但会有线程开销和阻塞问题，异步非阻塞模式线程少并发高，但是编程模型变得复杂。
    架构师做技术选型需要严谨务实，具备批判性思维 (Critical Thinking)，即使是对于一线大公司推出的开源产品，也要批判性看待，不可盲目追新。
    个人建议生产环境继续使用 Zuul1，同步阻塞模式的一些不足，可以使用熔断组件 Hystrix 和 AsyncServlet 等技术进行优化。
---------------------
vagrant docker Vert.x  Nutz  quarkus JFinal  GraalVM   Truffle框架
配置管理工具：puppet ansible chef cfEngine
zuul1.0 Stress Test Vs Spring gateway Vs zuul2.0
分布式跟踪系统 或 全链路压测（即链路打标）
 AsyncServlet 进行优化zuul 1.x 连接数
zuul生产调优
Zuul1 监控埋点
CAT 调用链
http://bigbully.github.io/Dapper-translation/
B树、B+树、索引
B树物理存储结构，只有叶子节点存储数据？
磁盘预读机制
AtomicStampedReference
ThreadPoolExecutor： 线程池的各个参数的含义及配合作用
Callable Vs Runnable
----------------------------------------------
