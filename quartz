Scheduler Factory – The factory bean that is responsible for building the Scheduler model and wiring in all the dependent components, based on the contents of the quartz properties file.
Scheduler – Maintains the JobDetail/Trigger registry. It is also responsible for executing the associated jobs when a trigger fires.
Scheduler Thread – The thread responsible for performing the work of firing the triggers. It contacts the JobStore to get the next set of triggers to be fired.
Job – An interface that must be implemented by the task to be executed.
Trigger – Instructs the scheduler about the time that the associated job should be fired.
JobStore – An interface to be implemented by the classes that provide a storage mechanism for Jobs and Triggers.
ThreadPool – A job to be executed is transferred to the pool of threads, represented by the ThreadPool.
Worker Threads - Individual threads that build up the ThreadPool and execute jobs.

Misfire策略：
quartz.properties配置文件中含有一个属性是misfireThreshold（单位毫秒），用来指定调度引擎设置触发器超时的“临界值”。
也就是说Quartz对于任务的超时是有容忍度的。只有超过这个容忍度才会判定为misfire。
----------------------------------------------------Demo-----------------------
#设置容忍度为12s
org.quartz.jobStore.misfireThreshold = 12000
Corn=[*/2 * * * * ?] 即每两秒循环一次
jobDetail每次执行需要7s
任务编号	预定运行时刻	实际运行时刻	延迟量（秒）
1	17:54:00	17:54:00	0
2	17:54:02	17:54:07	5
3	17:54:04	17:54:14	10
4	17:54:06	17:54:21	misfire

从表中可以看到，每一次任务的延迟都是5s作用，该延迟量不断累积，并且与misfireThreshold比较，
直到在17:54:21时发生了misfire，那么17:54:21第4次任务会不会执行呢，答案是不一定的，取决于配置(Misfire Instruction).

misfired判断依据：status=waiting,next_fire_time < current_time-misfirethreshold(可配置，默认1分钟)
不同类型Trigger misfire处理不同（该处理指的是在立即发现一次misfire后，是否要处理）。

了处理 misfired job，Quartz 中为 trigger 定义了处理策略，主要有下面两种：
MISFIRE_INSTRUCTION_FIRE_ONCE_NOW：针对 misfired job 马上执行一次；
MISFIRE_INSTRUCTION_DO_NOTHING：忽略 misfired job，等待下次触发；默认

以jdbcjobstore为例，Quartz是有一个线程专门扫描和处理misfired的任务，可以看到其实Quartz起了一个单独的MisfireHandler线程来处理这些misfired job。
它的逻辑很简单，就是找出misfired的trigger，然后尝试恢复他们:doUpdateOfMisfiredTrigger的逻辑其实蛮简单的，就是一个切面，前后通知triggerListener，
主要委托给trigger本事的updateAfterMisfire方法。这是一个抽象方法，所有的trigger实现类都要实现这个方法。
发现其实做的事情很简单，就是两件事情：
updateAfterMisfire方法：
    获取和调整misfireInstruction
    根据misfireInstruction进行相应的处理，主要是设置nextFireTime，以便让该miss的任务立即执行或者后面执行。

misfire产生需要有2个前置条件，一个是job到达触发时间时没有被执行，二是被执行的延迟时间超过了Quartz配置的misfireThreshold阀值。
如果延迟执行的时间小于阀值，则Quartz不认为发生了misfire，立即执行job；如果延迟执行的时间大于或者等于阀值，则被判断为misfire，然后会按照指定的策略来执行。
这里从SimpleTrigger和CronTrigger两个维度来说明。注意：在不指定misfire策略的情况下，Quartz会使用默认的MISFIRE_INSTRUCTION_SMART_POLICY策略。

根据JavaDoc介绍和官网文档分析，其对应执行策略如下：
MISFIRE_INSTRUCTION_FIRE_ONCE_NOW：立即执行一次，然后按照Cron定义时间点执行
MISFIRE_INSTRUCTION_DO_NOTHING：什么都不做，等待Cron定义下次任务执行的时间点
MISFIRE_INSTRUCTION_SMART_POLICY：智能的策略，针对不同的Trigger执行不同，CronTrigger时为MISFIRE_INSTRUCTION_FIRE_ONCE_NOW
MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY：将所有错过的执行时间点全都补上，例如，任务15s执行一次，执行的任务错过了4分钟，则执行MisFire时，一次性执行4*(60/15)= 16次任务

------------------------------------------------------------------------------
