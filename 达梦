

要注意和字符串截断报错问题的区别 字符串截断，只是纯粹的精度不够，如varchar(400), 是可以放400 个字节的字符串，我们让它要放入401 个，就会报错字符串截断。
字符串截断和数据溢出，是一个类型的错误，数据溢出就是非字符串类型，精度不足。


select page(); -- 一条记录的长度不能超过页大小的一半
我们可以简单理解为，对于任何表的一行记录（不包括大字段），他们的总长达（字节大小）， 不能超过页大小的一半。（也就是所谓的行内数据，对于LOB 字段，绝大部分都是行外数据）


我们在从Oracle 或者其他数据库迁移数据到达梦数据库时（含使用DTS ），以及甚至平时，自己平时插入数据时，都可能碰到一个错误：

记录超长
碰到这种问题，我们怎么解决呢？
有三个方法
Ø   考虑更加合适的页大小（扩大），重新初始化实例后，重新导入数据
Ø   对表启用超长列存储功能，重新导入（或者插入）数据 ：
       利用图形界面，对该表启用超长记录  
       或 SQL  : alter table XXX enable using long row 
Ø   把很长的varchar 类型，考虑使用CLOB 重建表后，再进行插入
    这个就是说的，本来我们一个表 test1(v1 int,…,vx int,vy varchar(8000)) ，插入数据时报错了，这个是我们：
    Alter table test1 rename to test1_modify;
    Create table test1(v1 int,…,vx int,vy clob);
    Insert into test1 select * from test1_modify;commit;
    然后，在进行相关操作，就不会碰到记录超长的问题了
    
    这个方法可能会涉及到代码改造，比如对应字段在应用端的处理，varchar 类型和CLOB 类型的处理方式存在区别。
    CLOB 字段也可以直接like ，但和 CLOB_LIKE_MAX_LEN 该参数有关系，注意学习下达梦配置文件（dm.ini 参考DBA 手册 正解 2.1.1 ）：
        CLOB_LIKE_MAX_LEN    默认值为 31 静态参数
        LIKE 语句中 CLOB 类型的最大长度，单位 KB ，有效值范围（ 8~102400 ）
               
默认情况下，达梦数据库实例的varchar 字段的精度，表示的含义是字节，而对于汉字而言，在UTF-8 编码下的字节占用，是比GB18030 编码下的字节占用，要大。
所以反过来说，对于dexp&dimp 搬过来的表结构，都是一致的情况下，比如：都是varchar （400 ），可以存放的汉子个数，是不一样的。

------这是一个把数据库实例中目标表中的所有varchar 字段，精度放大一倍的脚本（当成SQL 执行）：通过控制游标查出来的表即可。
declare

begin

for rs in(

select sch.name sch,tab.name tab,col.name   col,COl.length$ len from sysobjects sch,sysobjects tab ,syscolumns col

where sch.id=tab.schid and   sch.name||'.'||tab.name in (

'USER.TABUTKMONITOR',

'USER.TABUTHORIZATIONRISKLOG',

'USER.TABUSTOMER',

'USER.TABARD',

'USER.TABOSSREPORT',

'USER.TABUDGETENTITYCARDS',

'USER.TABRANSACTIONLOG',

'USER.TABCCOUNT',

'USER.TABSTOMERINFO',

'USER.TABRANSACTIONLOG',

'USER.TABUTHORIZATIONRISKLOG'

)

and tab.id=col.id and col.TYPE$ in   ('VARCHAR','VARCHAR2') ) loop

declare

begin

 execute immediate 'alter table   "'||rs.sch||'"."'||rs.tab||'" modify '||rs.col||'   varchar('||rs.len*2||');';

exception when others then

 print(sqlerrm);

end;

end loop;

end;
--------------------------------------------------
自增列处理： 在DM 应该先手动迁移该表结构，在迁移数据：

create SEQUENCE seq_auto_increment_test3 INCREMENT by 1 START WITH 1 ;

create table test3

(

 id int default seq_auto_increment_test3.nextval primary key,

 str varchar(2)

);
--------------------------------------------------------------------------------
--------------存储过程----------

create sequence seq_auto_increment increment by 1  start with 1 ;

create table seq_test (
 id int default seq_auto_increment.nextval primary key ,
 name varchar(20)
)

declare 
begin
	for n in 1 ..10 loop
	   insert into seq_test(name)values(n);
	end loop;
	commit ;
end;
/
-- 注意最后面的斜杠 /
--------------------------------------------------------------

select * from v$tablespace; -- 表空间
select * from v$datafile; -- 数据文件

杀会话：DM 数据库采用的是线程架构，所有不能向Oracle那样直接kill 进程，只能调用sp_close_session()来kill 线程杀掉会话 （从 sys.v$sessions 获取会话ID）
      SQL> SP_CLOSE_SESSION(140615618728712);
select para_name,para_value from v$dm_ini  -- 查看配置信息

---达梦 cursor sample --------------
create table T1 ( sex varchar2 ( 10 ), name varchar2 ( 20 ));

insert into t1 values ( ' 男 ' , ' 小刘 ' );
insert into t1 values ( ' 女 ' , ' 小陈 ' );
insert into t1 values ( ' 女 ' , ' 晓燕 ' );
insert into t1 values ( ' 女 ' , ' 小红 ' );
commit ;

select * from t1 ;

DECLARE

  CURSOR c_t1_cursor is select sex , name from t1 where sex= ' 女 ' ;

 v_sex  t1 . sex %type ;

 v_name t1 . name %type ;

begin

  open c_t1_cursor ;

  loop

  fetch c_t1_cursor into v_sex , v_name ;

  exit when c_t1_cursor%notfound ;

  print ( v_name|| ' is ' ||v_sex );

  end loop ;
--------------------------------------------------
达梦同义词的作用及特点：

1) 多用户协同开发中，可以屏蔽对象的名字及其持有者。如果没有同义词，当操作其他用户的表时，必须通过(模式名.表名)的形式，采用了达梦同义词之后就可以隐蔽掉模式名

2) 为用户简化sql语句。上面的一条其实就是一种简化sql的体现，同时如果自己建的表的名字很长，可以为这个表创建一个达梦同义词来简化sql开发。

3) 为分布式数据库的远程对象提供位置透明性。

同义词的优点：节省大量的数据库空间，对不同用户的操作同一张表没有多少差别;扩展的数据库的使用范围，能够在不同的数据库用户之间实现无缝交互;同义词可以创建在不同一个数据库服务器上，通过网络实现连接。

删除同义词：drop public synonym   table_name;

查看所有同义词：select * from dba_synonyms;
----------------------------------------------------


